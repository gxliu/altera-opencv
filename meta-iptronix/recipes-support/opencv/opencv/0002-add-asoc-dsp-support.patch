Index: OpenCV-2.4.3/modules/core/CMakeLists.txt
===================================================================
--- OpenCV-2.4.3.orig/modules/core/CMakeLists.txt
+++ OpenCV-2.4.3/modules/core/CMakeLists.txt
@@ -26,3 +26,4 @@ ocv_add_precompiled_headers(${the_module
 ocv_add_accuracy_tests()
 ocv_add_perf_tests()
 
+add_definitions(-DHAVE_ALTERA_SOC_OPTIMIZATION)
\ No newline at end of file
Index: OpenCV-2.4.3/modules/core/src/alloc.cpp
===================================================================
--- OpenCV-2.4.3.orig/modules/core/src/alloc.cpp
+++ OpenCV-2.4.3/modules/core/src/alloc.cpp
@@ -59,18 +59,104 @@ static void* OutOfMemoryError(size_t siz
 void deleteThreadAllocData() {}
 #endif
 
+#ifdef HAVE_ALTERA_SOC_OPTIMIZATION
+  #include <unistd.h>
+  #include <fcntl.h>
+  #include <sys/mman.h>
+  #include <sys/ioctl.h>
+  #include <linux/types.h>
+  #define ASOC_DSP_IOCTL_MAGIC 'Ö'  
+  #define ASOC_DSP_IOCTL_REQ_BUFFER     _IOW(ASOC_DSP_IOCTL_MAGIC, 0, sAsocDspBuffer*)
+  #define ASOC_DSP_IOCTL_FREE_BUFFER    _IOW(ASOC_DSP_IOCTL_MAGIC, 1, sAsocDspBuffer*)
+  typedef struct {
+    size_t      size;   //! size of the dma buffer
+    void       *virt;   //! kernel virtual pointer to buffer
+    void       *phys;   //! physical address of the dma buffer
+    //dma_addr_t  dhnd;   //! DMA handler
+    unsigned long long dhnd;   //! DMA handler
+  }sAsocDspBuffer;
+#endif
+
 void* fastMalloc( size_t size )
 {
-    uchar* udata = (uchar*)malloc(size + sizeof(void*) + CV_MALLOC_ALIGN);
+#ifdef HAVE_ALTERA_SOC_OPTIMIZATION
+    int             ret;
+    int             fd;       //! dsp device driver file descriptor
+    void           *addr;     //! user space buffer's pointer
+    sAsocDspBuffer  buf;
+    uchar         **adata;
+
+    fd = open("/dev/asoc_dsp", O_RDWR);
+    if(fd<0){
+        uchar* udata = (uchar*)malloc(size + sizeof(void*)*6 + 256);//CV_MALLOC_ALIGN);
+        if(!udata)
+            return OutOfMemoryError(size);
+        adata = alignPtr((uchar**)udata + 6, 256);//CV_MALLOC_ALIGN);
+        adata[-1] = udata;
+        adata[-2] = (uchar*)-1;
+        return adata;
+//printf("fastMalloc: open error\n");
+//      return OutOfMemoryError(size);
+    }
+    buf.size = size + sizeof(uchar*)*6 + 256;//CV_MALLOC_ALIGN;
+    buf.virt = 0;
+    buf.phys = 0;
+    ret = ioctl(fd, ASOC_DSP_IOCTL_REQ_BUFFER, &buf);
+    if(ret){
+printf("fastMalloc: ioctl error\n");
+        close(fd);
+        return OutOfMemoryError(size);
+    }
+    addr = mmap(NULL, buf.size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, (int)buf.phys);
+    if(addr==MAP_FAILED){
+printf("fastMalloc: Error mapping buffer\n");
+        ioctl(fd, ASOC_DSP_IOCTL_FREE_BUFFER, &buf);
+        close(fd);
+        return OutOfMemoryError(size);
+    }
+//printf("fastMalloc: adata: %08X addr: %08X\n", (uint32_t)adata, (uint32_t)addr);
+    adata = alignPtr((uchar**)addr + 6, 256);//CV_MALLOC_ALIGN);
+    adata[-1] = (uchar*)addr;
+    adata[-2] = (uchar*)fd;
+    adata[-3] = (uchar*)buf.size;
+    adata[-4] = (uchar*)buf.virt;
+    adata[-5] = (uchar*)buf.phys;
+    adata[-6] = (uchar*)buf.phys + ((uint32_t)adata - (uint32_t)addr);
+    return adata;
+#else
+    uchar* udata = (uchar*)malloc(size + sizeof(void*) + 256);//CV_MALLOC_ALIGN);
     if(!udata)
         return OutOfMemoryError(size);
-    uchar** adata = alignPtr((uchar**)udata + 1, CV_MALLOC_ALIGN);
+    uchar** adata = alignPtr((uchar**)udata + 1, 256);//CV_MALLOC_ALIGN);
     adata[-1] = udata;
     return adata;
+#endif
 }
 
 void fastFree(void* ptr)
 {
+#ifdef HAVE_ALTERA_SOC_OPTIMIZATION
+    if(ptr)
+    {
+        void           *addr;  //! user space buffer's pointer
+        int             fd;    //! dsp device driver file descriptor
+        sAsocDspBuffer  buf;
+        addr = ((void**)ptr)[-1];
+        fd   = (int)(((void**)ptr)[-2]);
+        if(fd==-1){
+            CV_DbgAssert(addr < (uchar*)ptr &&
+                  ((uchar*)ptr - addr) <= (ptrdiff_t)(sizeof(void*)+CV_MALLOC_ALIGN));
+            free(addr);
+        }else{
+            buf.size = (size_t)(((void**)ptr)[-3]);
+            buf.virt = ((void**)ptr)[-4];
+            buf.phys = ((void**)ptr)[-5];
+            munmap(addr, buf.size);
+            ioctl(fd, ASOC_DSP_IOCTL_FREE_BUFFER, &buf);
+            close(fd);
+        }
+    }
+#else
     if(ptr)
     {
         uchar* udata = ((uchar**)ptr)[-1];
@@ -78,6 +164,7 @@ void fastFree(void* ptr)
                ((uchar*)ptr - udata) <= (ptrdiff_t)(sizeof(void*)+CV_MALLOC_ALIGN));
         free(udata);
     }
+#endif
 }
 
 #else //CV_USE_SYSTEM_MALLOC
Index: OpenCV-2.4.3/modules/imgproc/CMakeLists.txt
===================================================================
--- OpenCV-2.4.3.orig/modules/imgproc/CMakeLists.txt
+++ OpenCV-2.4.3/modules/imgproc/CMakeLists.txt
@@ -1,2 +1,4 @@
 set(the_description "Image Processing")
 ocv_define_module(imgproc opencv_core)
+
+add_definitions(-DHAVE_ALTERA_SOC_OPTIMIZATION)
\ No newline at end of file
Index: OpenCV-2.4.3/modules/imgproc/src/asoc.cpp
===================================================================
--- /dev/null
+++ OpenCV-2.4.3/modules/imgproc/src/asoc.cpp
@@ -0,0 +1,287 @@
+/**
+ * Altera SoC
+ */
+
+#include "precomp.hpp"
+
+#include <unistd.h>
+#include <stddef.h>
+#include <stdio.h>
+#include <string.h>
+#include <stdint.h>
+#include <fcntl.h>
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <sys/mman.h>
+
+#include "asoc.hpp"
+
+
+namespace cv { namespace asoc
+{
+  #include "asoc_dsp.h"
+
+  #define ASOC_DSP_IOCTL_MAGIC 'Ö'  
+  #define ASOC_DSP_IOCTL_REQ_BUFFER         _IOW(ASOC_DSP_IOCTL_MAGIC, 0, sAsocDspBuffer*)
+  #define ASOC_DSP_IOCTL_FREE_BUFFER        _IOW(ASOC_DSP_IOCTL_MAGIC, 1, sAsocDspBuffer*)
+  #define ASOC_DSP_IOCTL_FLUSH_BUFFER       _IOW(ASOC_DSP_IOCTL_MAGIC, 2, sAsocDspBuffer*)
+  #define ASOC_DSP_IOCTL_INVALIDATE_BUFFER  _IOW(ASOC_DSP_IOCTL_MAGIC, 3, sAsocDspBuffer*)
+  #define ASOC_DSP_IOCTL_GET_DMAR_STAT      _IOW(ASOC_DSP_IOCTL_MAGIC, 4, int *)
+  #define ASOC_DSP_IOCTL_START              _IOW(ASOC_DSP_IOCTL_MAGIC, 5, sAsocDspStart*)
+  #define ASOC_DSP_IOCTL_STOP               _IOW(ASOC_DSP_IOCTL_MAGIC, 6, int)
+
+extern sAsocDspFilter dsp_f1;
+
+#define ASOC_DSP_TIME
+
+#ifdef ASOC_DSP_TIME
+  #include <sys/time.h>
+  uint32_t us_get(void)
+  {
+    struct timeval t;
+    gettimeofday(&t, NULL);
+    return t.tv_sec * 1000000 + t.tv_usec;
+  }
+  #define ASOC_DSP_TIME_GET(t) {t = us_get();}
+  #define ASOC_DSP_TIME_DIF(d, t) {d = us_get()-t;}
+#endif
+
+  void matDump(char* des, cv::Mat& mat)
+  {
+    printf( "ASoC DSP: Mat Dump %s:\n"
+            "  data %08X\n"
+            "  dims %d\n"
+            //"  size %f %f\n"
+            "  type %d\n"
+            "  addr %08X\n"
+            "  fd   %d\n"
+            "  size %08X\n"
+            "  virt %08X\n"
+            "  phys %08X\n"
+            "  buff %08X\n",
+            des,
+            mat.data,
+            mat.dims,
+          // mat.size[0], mat.size[1],
+            mat.type(),
+            (uint32_t)(((void**)(mat.data))[-1]),
+            (uint32_t)(((void**)(mat.data))[-2]),
+            (uint32_t)(((void**)(mat.data))[-3]),
+            (uint32_t)(((void**)(mat.data))[-4]),
+            (uint32_t)(((void**)(mat.data))[-5]),
+            (uint32_t)(((void**)(mat.data))[-6]));
+  }
+
+  /**
+   */
+  int filter(int type, cv::Mat& src, cv::Mat& dst, int dx, int dy, int borderType)
+  {
+    static sAsocDspFilter *old = 1;
+    sAsocDspFilter *ff = NULL;
+#ifdef ASOC_DSP_TIME
+    uint32_t t, tl, tf;
+#endif
+
+    switch(type){
+    case FILTER_SOBEL_3X3: break;
+    case FILTER_SCHARR   : break;
+    case FILTER_LAPLACE1 : ff = &dsp_f1; break;
+    case FILTER_LAPLACE3 : ff = &dsp_f1; break;
+    case FILTER_LAPLACE5 : ff = &dsp_f1; break;
+    }
+    if(ff){
+
+//matDump("src", src);
+//matDump("dst", dst);
+
+      //if(ff!=old){
+//        printf("ASoC DSP: load filter\n");
+ASOC_DSP_TIME_GET(t);
+        dspLoad(ff);
+ASOC_DSP_TIME_DIF(tl, t);
+        old = ff;
+      //}
+
+sAsocDspBuffer  srcBuf;
+uint32_t        srcAdr;
+sAsocDspBuffer  dstBuf;
+uint32_t        dstAdr;
+
+srcBuf.size = (uint32_t)(((void**)(src.data))[-3]);
+srcBuf.virt = (uint32_t)(((void**)(src.data))[-4]);
+//srcBuf.virt = (uint32_t)(((void**)(src.data))[-1]);
+srcBuf.phys = (uint32_t)(((void**)(src.data))[-5]);
+srcAdr      = (uint32_t)(((void**)(src.data))[-6]);
+
+dstBuf.size = (uint32_t)(((void**)(dst.data))[-3]);
+dstBuf.virt = (uint32_t)(((void**)(dst.data))[-4]);
+//dstBuf.virt = (uint32_t)(((void**)(dst.data))[-1]);
+dstBuf.phys = (uint32_t)(((void**)(dst.data))[-5]);
+dstAdr      = (uint32_t)(((void**)(dst.data))[-6]);
+
+ASOC_DSP_TIME_GET(t);
+      dspFilter(&srcBuf, srcAdr, &dstBuf, dstAdr);
+ASOC_DSP_TIME_DIF(tf, t);
+
+/**/
+/*
+      dspFilter((uint32_t)(((void**)(src.data))[-6]),
+                (uint32_t)(((void**)(dst.data))[-6]));
+*/
+#ifdef ASOC_DSP_TIME
+printf("time load %d us filter %d us\n", tl, tf);
+#endif
+    }else{
+      src.copyTo(dst(Rect(0, 0, src.cols, src.rows)));
+    }
+    return src.rows;
+  }
+
+  /**
+   */
+  int dspLoad(sAsocDspFilter* pFlt)
+  {
+    int       fd;
+    uint32_t  phys;
+    uint32_t  size;
+    void     *virt;
+    int       ret;
+
+    fd = open("/dev/asoc_dsp", O_RDWR);
+    if(fd<0){
+      printf("ASoC DSP: Load: Error open\n");
+      return -1;
+    }
+    phys = 0x00000000;
+    size = 0x00004000;
+    virt = mmap(NULL, size,
+                PROT_READ|PROT_WRITE, MAP_SHARED,
+                fd, phys);
+    if(virt==MAP_FAILED){
+      printf("ASoC DSP: Load: Error mapping memory\n");
+      close(fd);
+      return -1;
+    }
+    ret = ioctl(fd, ASOC_DSP_IOCTL_STOP, 0);
+    if(ret){
+      printf("ASoC DSP: Load: Error ioctl\n");
+      munmap((void*)phys, size);
+      close(fd);
+      return -1;
+    }
+    pFlt->ptr_set(0, 0);
+//printf("ASoC DSP: Load: copy programs\n");
+    memcpy((void*)((uint8_t*)virt + ASOC_DSP_NIOS_PROG),
+          (void*)pFlt->nios_prog,
+pFlt->prog_size);
+    memcpy((void*)((uint8_t*)virt + ASOC_DSP_DMA_WR_BASE),
+          (void*)pFlt->dma_wr,
+          ASOC_DSP_DMA_WR_DEF_SIZE);
+    memcpy((void*)((uint8_t*)virt + ASOC_DSP_DMA_RD_BASE),
+          (void*)pFlt->dma_rd,
+          ASOC_DSP_DMA_RD_DEF_SIZE);
+    munmap((void*)phys, size);
+    close(fd);
+//printf("ASoC DSP: Load: done\n");
+    return 0;
+  }
+
+  /**
+   */
+  int dspFilter(sAsocDspBuffer* srcBuf, uint32_t srcAdr, sAsocDspBuffer* dstBuf, uint32_t dstAdr)
+  {
+    int       fd;
+    uint32_t  phys;
+    uint32_t  size;
+    void     *virt;
+    int       ret;
+    uint32_t *ptr;
+    uint32_t  sts;
+sAsocDspStart dsp;
+
+    fd = open("/dev/asoc_dsp", O_RDWR);
+    if(fd<0){
+      printf("ASoC DSP:Filter:  Error open\n");
+      return -1;
+    }
+    phys = 0x00000000;
+    size = 0x00004000;
+    virt = mmap(NULL, size,
+                PROT_READ|PROT_WRITE, MAP_SHARED,
+                fd, phys);
+    if(virt==MAP_FAILED){
+      printf("ASoC DSP: Filter: Error mapping memory\n");
+      close(fd);
+      return -1;
+    }
+    ret = ioctl(fd, ASOC_DSP_IOCTL_STOP, 0);
+    if(ret){
+      printf("ASoC DSP: Filter: ASOC_DSP_IOCTL_STOP Error ioctl\n");
+      munmap((void*)phys, size);
+      close(fd);
+      return -1;
+    }
+//TODO
+//    printf("ASoC DSP: Filter: set source and destination pointer\n");
+    ptr = (uint32_t*)((uint8_t*)virt + ASOC_DSP_DMA_WR_BASE + (128*8 + 1*8));
+//printf("ASoC DSP: Filter: src %08X %08X\n", ptr, (uint32_t)srcAdr>>2);
+    *ptr = srcAdr>>2;
+    ptr = (uint32_t*)((uint8_t*)virt + ASOC_DSP_DMA_RD_BASE + (128*8 + 8*8 + 8*8 + 1*8));
+//printf("ASoC DSP: Filter: dst %08X %08X\n", ptr, (uint32_t)dstAdr>>2);
+    *ptr = dstAdr>>2;
+
+    // flush cache src
+    ret = ioctl(fd, ASOC_DSP_IOCTL_FLUSH_BUFFER, srcBuf);
+    if(ret){
+      printf("ASoC DSP: Filter: ASOC_DSP_IOCTL_FLUSH_BUFFER Error ioctl\n");
+      munmap((void*)phys, size);
+      close(fd);
+      return -1;
+    }
+
+    // start DSP
+    dsp.src_size = srcBuf->size; // source buffer size
+    dsp.src_virt = srcBuf->virt; // source buffer virtual address
+    dsp.src_phys = srcBuf->phys; // source buffer physical address
+    dsp.dst_size = dstBuf->size; // destination buffer size
+    dsp.dst_virt = dstBuf->virt; // destination buffer virtual address
+    dsp.dst_phys = dstBuf->phys; // destination buffer physical address
+    ret = ioctl(fd, ASOC_DSP_IOCTL_START, &dsp);
+    if(ret){
+      printf("ASoC DSP: Filter: ASOC_DSP_IOCTL_START Error ioctl\n");
+      munmap((void*)phys, size);
+      close(fd);
+      return -1;
+    }
+
+    // wait for completion
+//printf("ASoC DSP: Filter: waiting\n");
+    do{
+      ret = ioctl(fd, ASOC_DSP_IOCTL_GET_DMAR_STAT, &sts);
+//printf("ASoC DSP: Filter: sts %08X\n", sts);
+      if(ret){
+        munmap((void*)phys, size);
+        close(fd);
+        return -1;
+      }
+      //usleep(30000);
+    }while(sts!=0);
+//printf("ASoC DSP: Filter: done\n");
+
+    // invalidate cache dst
+    ret = ioctl(fd, ASOC_DSP_IOCTL_INVALIDATE_BUFFER, dstBuf);
+    if(ret){
+      printf("ASoC DSP: Filter: ASOC_DSP_IOCTL_FLUSH_BUFFER Error ioctl\n");
+      munmap((void*)phys, size);
+      close(fd);
+      return -1;
+    }
+
+    munmap((void*)phys, size);
+    close(fd);
+//printf("ASoC DSP: Filter: exit\n");
+    return 0;
+  }
+
+}}
Index: OpenCV-2.4.3/modules/imgproc/src/asoc.hpp
===================================================================
--- /dev/null
+++ OpenCV-2.4.3/modules/imgproc/src/asoc.hpp
@@ -0,0 +1,65 @@
+/*! \file asoc.hpp
+ \brief Altera SoC
+ */
+
+#include "precomp.hpp"
+
+namespace cv { namespace asoc
+{
+  #include "asoc_dsp.h"
+  
+  typedef struct {
+    size_t      size;
+    void       *virt;
+    void       *phys;
+  }sAsocDspBuffer;
+
+  typedef struct {
+    size_t      src_size; // source buffer size
+    void       *src_virt; // source buffer virtual address
+    void       *src_phys; // source buffer physical address
+    size_t      dst_size; // destination buffer size
+    void       *dst_virt; // destination buffer virtual address
+    void       *dst_phys; // destination buffer physical address
+  }sAsocDspStart;
+
+  enum {
+    FILTER_SOBEL_3X3 = 0,
+    FILTER_SCHARR    = 1,
+    FILTER_LAPLACE1  = 2,
+    FILTER_LAPLACE3  = 3,
+    FILTER_LAPLACE5  = 4,
+
+  };
+  /*enum {
+    MEM_WRITE = 0,
+    MEM_READ  = 1,
+  };*/
+
+  /**
+   * @param type
+   * @param src
+   * @param dst
+   * @param dx
+   * @param dy
+   * @param borderType
+   */
+  int filter(int type, cv::Mat& src, cv::Mat& dst, int dx, int dy, int borderType);
+
+  /**
+   * @param pFlt filter to apply
+   */
+  int dspLoad(sAsocDspFilter* pFlt);
+
+  /**
+   * @brief
+   *
+   * @param srcBuf pointer to buffer struct to read from
+   * @param srcAdr address to read from
+   * @param dstBuf pointer to buffer struct to write to
+   * @param dstAdr address to write to
+   */
+//  int dspFilter(uint32_t src, uint32_t dst);
+  int dspFilter(sAsocDspBuffer* srcBuf, uint32_t srcAdr, sAsocDspBuffer* dstBuf, uint32_t dstAdr);
+}}
+
Index: OpenCV-2.4.3/modules/imgproc/src/asoc_dsp_f1.cpp
===================================================================
--- /dev/null
+++ OpenCV-2.4.3/modules/imgproc/src/asoc_dsp_f1.cpp
@@ -0,0 +1,334 @@
+/**
+ * @file asoc_dsp_f1.c
+ */
+namespace cv { namespace asoc
+{
+
+#include "asoc_dsp.h"
+
+/**
+ */
+static sAsocDspDmaWr ffw = {
+  //opcode
+  {
+    // ---src---   ---dst---
+    // addr  incr  addr  incr  words  iter  loop_addr
+    {     1,    1,    1,    1,    20,    7,         0}, // loop 16 times on iterator 7
+    {     1,    1,    1,    1,     0,    1,        -1}, // loop 15 times on iterator 1
+  },
+  //src_addr - address:30; burst_size:10;
+  { {0, 0}, {0x0, 16}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
+  //src_incr - brst_inc:20; end_inc:20;
+  { {0, 0}, {16*4, 4*4}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
+  //dst_addr - address0:20; address1:20;
+  { {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
+  //dst_incr - word_inc:13; burst_inc:13; end_inc:13;
+  { {0, 0, 0}, {1, 0x71, 0x7d }, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {1, 0x31, 0x3b} },
+  //iter - iter:20; iterrst:20;
+  { {0, 0}, {0, 15-1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 16-1} },
+};
+
+/**
+ */
+static sAsocDspDmaRd ffr = {
+  //opcode
+  {
+    // ---src---   ---dst---
+    // addr  incr  addr  incr  words  iter  loop_addr
+    {     1,    1,    1,    1,    40,    7,         0}, // loop 16 times on iterator 7
+    {     1,    1,    1,    1,     0,    1,        -1}, // loop 15 times on iterator 1
+  },
+  //src_addr - address:32; unused:8;
+  { {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
+  //src_incr
+  { {0, 0, 0}, {1, 1, 25}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {1, 0x31, 0x37} },
+  //dst_addr - address:30; burst_size:10;
+  { {0, 0}, {0x0, 16}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
+  //dst_incr - word_inc:20; end_inc:20;
+  { {0, 0}, {16*4, 8*4}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
+  //iter - iter:20; iterrst:20;
+  { {0, 0}, {0, 15-1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 16-1} },
+};
+
+/**
+ */
+static uint8_t nios_prog[] = {
+
+0x00, 0x80, 0x80, 0x14, 0x10, 0x01, 0x48, 0x3A, 0x10, 0xBF, 0xF8, 0x04, 0x00, 0xBF, 0xFD, 0x16,
+0x00, 0x40, 0x00, 0x34, 0x08, 0x40, 0x08, 0x14, 0x08, 0x00, 0x68, 0x3A, 0x00, 0x00, 0x00, 0x00,
+0x06, 0xC0, 0x00, 0x34, 0xDE, 0xC4, 0x00, 0x14, 0x06, 0x80, 0x00, 0x34, 0xD6, 0xA1, 0x5D, 0x14,
+0x00, 0x80, 0x00, 0x34, 0x10, 0x81, 0x6B, 0x14, 0x00, 0xC0, 0x00, 0x34, 0x18, 0xC1, 0x6E, 0x14,
+0x10, 0xC0, 0x03, 0x26, 0x10, 0x00, 0x00, 0x15, 0x10, 0x80, 0x01, 0x04, 0x10, 0xFF, 0xFD, 0x36,
+0x00, 0x00, 0x42, 0xC0, 0x00, 0x00, 0x49, 0x80, 0x00, 0x3F, 0xFF, 0x06, 0xDE, 0xFF, 0xE8, 0x04,
+0xDF, 0x00, 0x17, 0x15, 0xDF, 0x00, 0x17, 0x04, 0xD0, 0xA0, 0x01, 0x17, 0x10, 0x07, 0x88, 0x3A,
+0xD0, 0xA0, 0x00, 0x17, 0x18, 0x85, 0xC8, 0x3A, 0x10, 0x80, 0x00, 0x44, 0x10, 0x04, 0x91, 0xBA,
+0x10, 0xBF, 0xFF, 0xCC, 0x10, 0xA0, 0x00, 0x1C, 0x10, 0xA0, 0x00, 0x04, 0x10, 0x05, 0xD1, 0xBA,
+0x10, 0x07, 0x88, 0x3A, 0x00, 0xBF, 0x00, 0x04, 0xE1, 0x3F, 0xFE, 0x17, 0x20, 0x84, 0x70, 0x3A,
+0xE0, 0xBF, 0xFE, 0x15, 0x00, 0xBF, 0xFC, 0x34, 0x10, 0x80, 0xFF, 0xC4, 0xE1, 0x3F, 0xFE, 0x17,
+0x20, 0x84, 0x70, 0x3A, 0x10, 0x81, 0x00, 0x14, 0xE0, 0xBF, 0xFE, 0x15, 0x18, 0xBF, 0xFF, 0xCC,
+0x10, 0x80, 0xFF, 0xCC, 0x10, 0x06, 0x95, 0x3A, 0x00, 0xB0, 0x04, 0x34, 0x10, 0xBF, 0xFF, 0xC4,
+0xE1, 0x3F, 0xFE, 0x17, 0x20, 0x84, 0x70, 0x3A, 0x10, 0xC4, 0xB0, 0x3A, 0xE0, 0xBF, 0xFE, 0x15,
+0xD0, 0xA0, 0x01, 0x17, 0x10, 0x07, 0x88, 0x3A, 0xD0, 0xA0, 0x00, 0x17, 0x18, 0x85, 0xC8, 0x3A,
+0x10, 0x80, 0x00, 0x44, 0x10, 0x04, 0x91, 0xBA, 0x10, 0xBF, 0xFF, 0xCC, 0x10, 0xA0, 0x00, 0x1C,
+0x10, 0xA0, 0x00, 0x04, 0x10, 0x05, 0xD1, 0xBA, 0x10, 0x07, 0x88, 0x3A, 0x00, 0xBF, 0x00, 0x04,
+0xE1, 0x3F, 0xFF, 0x17, 0x20, 0x84, 0x70, 0x3A, 0xE0, 0xBF, 0xFF, 0x15, 0x00, 0xBF, 0xFC, 0x34,
+0x10, 0x80, 0xFF, 0xC4, 0xE1, 0x3F, 0xFF, 0x17, 0x20, 0x84, 0x70, 0x3A, 0x10, 0x81, 0x00, 0x14,
+0xE0, 0xBF, 0xFF, 0x15, 0x18, 0xBF, 0xFF, 0xCC, 0x10, 0x80, 0xFF, 0xCC, 0x10, 0x06, 0x95, 0x3A,
+0x00, 0xB0, 0x04, 0x34, 0x10, 0xBF, 0xFF, 0xC4, 0xE1, 0x3F, 0xFF, 0x17, 0x20, 0x84, 0x70, 0x3A,
+0x10, 0xC4, 0xB0, 0x3A, 0xE0, 0xBF, 0xFF, 0x15, 0x00, 0x80, 0x00, 0x44, 0xE0, 0xBF, 0xE9, 0x15,
+0xE0, 0xBF, 0xE9, 0x17, 0x10, 0x15, 0x80, 0x32, 0x00, 0xA0, 0x00, 0x34, 0xE0, 0xBF, 0xEA, 0x15,
+0xE0, 0xBF, 0xEA, 0x17, 0x12, 0xC7, 0x40, 0x32, 0x02, 0xC8, 0x40, 0x32, 0xE0, 0xBF, 0xFF, 0x17,
+0xE0, 0xBF, 0xEB, 0x15, 0xE0, 0xBF, 0xEB, 0x17, 0x10, 0x0F, 0x80, 0x32, 0xD0, 0xA0, 0x05, 0x17,
+0x10, 0xBF, 0xFF, 0xC4, 0x10, 0x80, 0xFF, 0xCC, 0x10, 0x06, 0x92, 0x3A, 0xD0, 0xA0, 0x00, 0x17,
+0x10, 0xBF, 0xFF, 0xC4, 0x10, 0x80, 0xFF, 0xCC, 0x10, 0x04, 0x94, 0xBA, 0x18, 0x84, 0xB0, 0x3A,
+0xE0, 0xBF, 0xEC, 0x15, 0xE0, 0xBF, 0xEC, 0x17, 0x10, 0x03, 0x80, 0x32, 0xE0, 0xBF, 0xFE, 0x17,
+0xE0, 0xBF, 0xED, 0x15, 0xE0, 0xBF, 0xED, 0x17, 0x10, 0x07, 0x80, 0x32, 0xE0, 0x3F, 0xF9, 0x15,
+0x00, 0x00, 0x84, 0x06, 0x00, 0x80, 0x00, 0x34, 0x10, 0x81, 0x4E, 0x04, 0xE0, 0xBF, 0xFB, 0x15,
+0xD0, 0xA0, 0x01, 0x17, 0x10, 0x85, 0x88, 0x3A, 0x00, 0x85, 0xC8, 0x3A, 0x10, 0x80, 0xFF, 0xCC,
+0x10, 0xBF, 0xFF, 0xCC, 0x10, 0xC0, 0xFF, 0xCC, 0x00, 0xBF, 0x00, 0x04, 0xE1, 0x3F, 0xFE, 0x17,
+0x20, 0x84, 0x70, 0x3A, 0x10, 0xC4, 0xB0, 0x3A, 0xE0, 0xBF, 0xFE, 0x15, 0x00, 0x80, 0xF2, 0x04,
+0xE0, 0xBF, 0xF7, 0x15, 0xE0, 0x3F, 0xF8, 0x15, 0x00, 0x00, 0x6C, 0x06, 0xE0, 0xFF, 0xF8, 0x17,
+0x18, 0x80, 0x00, 0x98, 0x10, 0x00, 0x06, 0x1E, 0xD0, 0xA0, 0x04, 0x17, 0xE1, 0x3F, 0xF9, 0x17,
+0x20, 0x80, 0x03, 0x0E, 0xE0, 0xBF, 0xF7, 0x17, 0x10, 0x88, 0x00, 0x34, 0xE0, 0xBF, 0xF7, 0x15,
+0xE0, 0xBF, 0xFE, 0x17, 0xE0, 0xBF, 0xEE, 0x15, 0xE0, 0xBF, 0xEE, 0x17, 0x10, 0x07, 0x80, 0x32,
+0xE0, 0xBF, 0xFE, 0x17, 0xE0, 0xBF, 0xEF, 0x15, 0xE0, 0xBF, 0xEF, 0x17, 0x10, 0x09, 0x80, 0x32,
+0x00, 0x80, 0x5E, 0x34, 0x10, 0x82, 0x00, 0x04, 0xE0, 0xFF, 0xF7, 0x17, 0x18, 0x84, 0xB0, 0x3A,
+0xE0, 0xBF, 0xF0, 0x15, 0xE1, 0x3F, 0xFB, 0x17, 0x20, 0x80, 0x00, 0x17, 0xE0, 0xBF, 0xF1, 0x15,
+0xE0, 0xBF, 0xFB, 0x17, 0x10, 0x80, 0x01, 0x04, 0xE0, 0xBF, 0xFB, 0x15, 0xE0, 0xFF, 0xF1, 0x17,
+0xE0, 0xBF, 0xF0, 0x17, 0x10, 0xC1, 0x80, 0x32, 0xE0, 0xFF, 0xF7, 0x17, 0x18, 0xC0, 0x01, 0x14,
+0xE0, 0xFF, 0xF7, 0x15, 0x00, 0x80, 0x3F, 0x34, 0x10, 0x82, 0x00, 0x04, 0xE1, 0x3F, 0xF7, 0x17,
+0x20, 0x84, 0xB0, 0x3A, 0xE0, 0xBF, 0xF2, 0x15, 0xE0, 0xFF, 0xFB, 0x17, 0x18, 0x80, 0x00, 0x17,
+0xE0, 0xBF, 0xF3, 0x15, 0xE1, 0x3F, 0xFB, 0x17, 0x21, 0x00, 0x01, 0x04, 0xE1, 0x3F, 0xFB, 0x15,
+0xE0, 0xFF, 0xF3, 0x17, 0xE0, 0xBF, 0xF2, 0x17, 0x10, 0xC1, 0x80, 0x32, 0xE0, 0xFF, 0xF8, 0x17,
+0x18, 0x80, 0x00, 0x98, 0x10, 0x00, 0x05, 0x1E, 0x00, 0xB8, 0x00, 0x34, 0x10, 0xBF, 0xFF, 0xC4,
+0xE1, 0x3F, 0xF7, 0x17, 0x20, 0x88, 0x70, 0x3A, 0xE1, 0x3F, 0xF7, 0x15, 0xE0, 0xFF, 0xF8, 0x17,
+0x18, 0x80, 0x00, 0x98, 0x10, 0x00, 0x08, 0x1E, 0xD0, 0xA0, 0x04, 0x17, 0x10, 0xBF, 0xFF, 0xC4,
+0xE1, 0x3F, 0xF9, 0x17, 0x20, 0x80, 0x04, 0x0E, 0x00, 0xA0, 0x00, 0x34, 0x10, 0x80, 0x08, 0x04,
+0xE0, 0xBF, 0xFD, 0x15, 0x00, 0x00, 0x02, 0x06, 0x00, 0xC0, 0x08, 0x04, 0xE0, 0xFF, 0xFD, 0x15,
+0xE1, 0x3F, 0xF8, 0x17, 0x20, 0x80, 0x01, 0x18, 0x10, 0x00, 0x03, 0x1E, 0x00, 0x94, 0x00, 0x34,
+0xE0, 0xBF, 0xFC, 0x15, 0x00, 0x00, 0x01, 0x06, 0xE0, 0x3F, 0xFC, 0x15, 0xE0, 0xFF, 0xFD, 0x17,
+0xE1, 0x3F, 0xFC, 0x17, 0x19, 0x04, 0xB0, 0x3A, 0xE0, 0xFF, 0xF7, 0x17, 0x10, 0xC4, 0xB0, 0x3A,
+0xE0, 0xBF, 0xF4, 0x15, 0xE1, 0x3F, 0xFB, 0x17, 0x20, 0x80, 0x00, 0x17, 0xE0, 0xBF, 0xF5, 0x15,
+0xE0, 0xBF, 0xFB, 0x17, 0x10, 0x80, 0x01, 0x04, 0xE0, 0xBF, 0xFB, 0x15, 0xE0, 0xFF, 0xF5, 0x17,
+0xE0, 0xBF, 0xF4, 0x17, 0x10, 0xC1, 0x80, 0x32, 0xE0, 0xFF, 0xFE, 0x17, 0x18, 0x05, 0x88, 0x3A,
+0x10, 0x80, 0xFF, 0xCC, 0x10, 0x07, 0x88, 0x3A, 0xD0, 0xA0, 0x01, 0x17, 0x18, 0x85, 0x88, 0x3A,
+0x10, 0x80, 0xFF, 0xCC, 0x10, 0xBF, 0xFF, 0xCC, 0x10, 0xC0, 0xFF, 0xCC, 0x00, 0xBF, 0x00, 0x04,
+0xE1, 0x3F, 0xFE, 0x17, 0x20, 0x84, 0x70, 0x3A, 0x10, 0xC4, 0xB0, 0x3A, 0xE0, 0xBF, 0xFE, 0x15,
+0xE0, 0xBF, 0xF8, 0x17, 0x10, 0x80, 0x00, 0x44, 0xE0, 0xBF, 0xF8, 0x15, 0xE0, 0xFF, 0xF8, 0x17,
+0x18, 0x80, 0x01, 0x50, 0x10, 0x3F, 0x91, 0x1E, 0xE1, 0x3F, 0xF9, 0x17, 0x21, 0x00, 0x00, 0x44,
+0xE1, 0x3F, 0xF9, 0x15, 0xD0, 0xA0, 0x04, 0x17, 0xE0, 0xFF, 0xF9, 0x17, 0x18, 0xBF, 0x79, 0x16,
+0xE0, 0x3F, 0xF6, 0x15, 0xE0, 0xBF, 0xF6, 0x17, 0x10, 0x15, 0x80, 0x32, 0xE0, 0x37, 0x88, 0x3A,
+0xDF, 0x00, 0x00, 0x17, 0xDE, 0xC0, 0x01, 0x04, 0xF8, 0x00, 0x28, 0x3A, 0x29, 0x00, 0x05, 0x1E,
+0xF8, 0x00, 0x28, 0x3A, 0x20, 0x80, 0x00, 0x17, 0x21, 0x00, 0x01, 0x04, 0x28, 0x80, 0x00, 0x15,
+0x29, 0x40, 0x01, 0x04, 0x29, 0xBF, 0xFB, 0x1E, 0xF8, 0x00, 0x28, 0x3A, 0xDE, 0xFF, 0xFF, 0x04,
+0x01, 0x00, 0x00, 0x34, 0x21, 0x01, 0x64, 0x04, 0x01, 0x40, 0x00, 0x34, 0x29, 0x41, 0x5D, 0x04,
+0x01, 0x80, 0x00, 0x34, 0x31, 0x81, 0x64, 0x04, 0xDF, 0xC0, 0x00, 0x15, 0x00, 0x00, 0x40, 0xC0,
+0x01, 0x00, 0x00, 0x34, 0x21, 0x00, 0x08, 0x04, 0x01, 0x40, 0x00, 0x34, 0x29, 0x40, 0x08, 0x04,
+0x01, 0x80, 0x00, 0x34, 0x31, 0x80, 0x08, 0x04, 0x00, 0x00, 0x40, 0xC0, 0x01, 0x00, 0x00, 0x34,
+0x21, 0x01, 0x4E, 0x04, 0x01, 0x40, 0x00, 0x34, 0x29, 0x41, 0x4E, 0x04, 0x01, 0x80, 0x00, 0x34,
+0x31, 0x81, 0x5D, 0x04, 0x00, 0x00, 0x40, 0xC0, 0x00, 0x00, 0x4E, 0x80, 0xDF, 0xC0, 0x00, 0x17,
+0xDE, 0xC0, 0x01, 0x04, 0x00, 0x00, 0x4E, 0xC1, 0xDE, 0xFF, 0xFF, 0x04, 0x00, 0x09, 0x88, 0x3A,
+0xDF, 0xC0, 0x00, 0x15, 0x00, 0x00, 0x4C, 0x80, 0x00, 0x00, 0x4C, 0x40, 0xD1, 0x20, 0x0E, 0x17,
+0xD1, 0x60, 0x0F, 0x17, 0xD1, 0xA0, 0x10, 0x17, 0xDF, 0xC0, 0x00, 0x17, 0xDE, 0xC0, 0x01, 0x04,
+0x00, 0x00, 0x05, 0xC1, 0xF8, 0x00, 0x28, 0x3A, 0xDE, 0xFF, 0xFF, 0x04, 0xDF, 0xC0, 0x00, 0x15,
+0x00, 0x00, 0x4F, 0x80, 0x00, 0x80, 0x00, 0x44, 0x10, 0x01, 0x70, 0x3A, 0xDF, 0xC0, 0x00, 0x17,
+0xDE, 0xC0, 0x01, 0x04, 0xF8, 0x00, 0x28, 0x3A, 0xF8, 0x00, 0x28, 0x3A, 0x00, 0x09, 0x88, 0x3A,
+0x01, 0x40, 0x80, 0x04, 0x00, 0x00, 0x50, 0x01, 0x00, 0x01, 0x70, 0xFA, 0xF8, 0x00, 0x28, 0x3A,
+0x00, 0x80, 0x80, 0x04, 0x20, 0x07, 0x88, 0x3A, 0x11, 0x40, 0x01, 0x2E, 0x10, 0x0B, 0x88, 0x3A,
+0x19, 0x4B, 0x88, 0x3A, 0x00, 0x00, 0x02, 0x06, 0x18, 0x00, 0x60, 0x3A, 0x18, 0xC0, 0x08, 0x04,
+0x19, 0x7F, 0xFD, 0x36, 0x20, 0x80, 0x07, 0xCC, 0x10, 0x00, 0x01, 0x26, 0x18, 0x00, 0x60, 0x3A,
+0x00, 0x00, 0x20, 0x3A, 0xF8, 0x00, 0x28, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0F,
+0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+static void set_ptr(uint32_t src, uint32_t dst) // TODO
+{
+  ffw.src_addr[1].address = src;
+  ffr.dst_addr[1].address = dst;
+}
+
+/**
+ */
+sAsocDspFilter dsp_f1 = {
+  nios_prog,          // nios_prog
+  sizeof(nios_prog),  // prog_size
+  0,//nios_data,          // nios_data
+  0,//sizeof(nios_data),  // data_size
+  &ffw,               // dma_wr
+  2,                  // dma_wr_size
+  &ffr,               // dma_rd
+  2,                  // dma_rd_size
+  set_ptr             // ptr_set
+};
+}}
\ No newline at end of file
Index: OpenCV-2.4.3/modules/imgproc/src/deriv.cpp
===================================================================
--- OpenCV-2.4.3.orig/modules/imgproc/src/deriv.cpp
+++ OpenCV-2.4.3/modules/imgproc/src/deriv.cpp
@@ -43,6 +43,11 @@
 #if defined (HAVE_IPP) && (IPP_VERSION_MAJOR >= 7)
 static IppStatus sts = ippInit();
 #endif
+
+#ifdef HAVE_ALTERA_SOC_OPTIMIZATION
+#include "asoc.hpp"
+#endif
+
 /****************************************************************************************/
 
 /* lightweight convolution with 3x3 kernel */
@@ -495,6 +500,15 @@ void cv::Sobel( InputArray _src, OutputA
         ddepth = src.depth();
     _dst.create( src.size(), CV_MAKETYPE(ddepth, src.channels()) );
     Mat dst = _dst.getMat();
+#ifdef HAVE_ALTERA_SOC_OPTIMIZATION
+    if (scale == 1.0 && delta == 0)
+    {
+        if (ksize == 3 && asoc::filter(asoc::FILTER_SOBEL_3X3, src, dst, dx, dy, borderType))
+            return;
+        if (ksize == -1 && asoc::filter(asoc::FILTER_SCHARR, src, dst, dx, dy, borderType))
+            return;
+    }
+#endif
 
 #ifdef HAVE_TEGRA_OPTIMIZATION
     if (scale == 1.0 && delta == 0)
@@ -539,6 +553,12 @@ void cv::Scharr( InputArray _src, Output
     _dst.create( src.size(), CV_MAKETYPE(ddepth, src.channels()) );
     Mat dst = _dst.getMat();
 
+#ifdef HAVE_ALTERA_SOC_OPTIMIZATION
+    if (scale == 1.0 && delta == 0)
+        if ( asoc::filter(asoc::FILTER_SCHARR, src, dst, dx, dy, borderType) )
+            return;
+#endif
+
 #ifdef HAVE_TEGRA_OPTIMIZATION
     if (scale == 1.0 && delta == 0)
         if (tegra::scharr(src, dst, dx, dy, borderType))
@@ -577,6 +597,17 @@ void cv::Laplacian( InputArray _src, Out
         ddepth = src.depth();
     _dst.create( src.size(), CV_MAKETYPE(ddepth, src.channels()) );
     Mat dst = _dst.getMat();
+#ifdef HAVE_ALTERA_SOC_OPTIMIZATION
+    if (scale == 1.0 && delta == 0)
+    {
+        if (ksize == 1 && asoc::filter(asoc::FILTER_LAPLACE1, src, dst, 0, 0, borderType))
+            return;
+        if (ksize == 3 && asoc::filter(asoc::FILTER_LAPLACE3, src, dst, 0, 0, borderType))
+            return;
+        if (ksize == 5 && asoc::filter(asoc::FILTER_LAPLACE5, src, dst, 0, 0, borderType))
+            return;
+    }
+#endif
 
 #ifdef HAVE_TEGRA_OPTIMIZATION
     if (scale == 1.0 && delta == 0)
@@ -610,6 +641,26 @@ void cv::Laplacian( InputArray _src, Out
         int wtype = CV_MAKETYPE(wdepth, src.channels());
         Mat kd, ks;
         getSobelKernels( kd, ks, 2, 0, ksize, false, ktype );
+/*{
+  int r,c;
+  printf("getSobelKernels\n");
+  printf("kd\n");
+  for(r=0; r<kd.rows; r++){
+    for(c=0; c<kd.cols; c++){
+      printf("% 4.3f ", kd.at<float>(r,c));
+      //printf("% 4.3f ", kd.at<double>(r,c));
+      //printf("%4d ", kd.at<short>(r,c));
+    }
+    printf("\n");
+  }
+  printf("ks\n");
+  for(r=0; r<ks.rows; r++){
+    for(c=0; c<ks.cols; c++){
+      printf("% 4.3f ", ks.at<float>(r,c));
+    }
+    printf("\n");
+  }
+}*/
         if( ddepth < 0 )
             ddepth = src.depth();
         int dtype = CV_MAKETYPE(ddepth, src.channels());
Index: OpenCV-2.4.3/modules/imgproc/src/asoc_dsp.h
===================================================================
--- /dev/null
+++ OpenCV-2.4.3/modules/imgproc/src/asoc_dsp.h
@@ -0,0 +1,207 @@
+/**
+ * @file asoc_dsp.h
+ */
+#ifndef __ASOC_DSP_H
+#define __ASOC_DSP_H
+
+#include <stdint.h>
+
+/**
+ * FPGA DDR3 memory accessed via HPS2FPGA AXI bridge
+ */
+#define ASOC_AXI_MEM_BASE       0xC0000000
+#define ASOC_AXI_MEM_SIZE       0x10000000
+
+/**
+ * FPGA Slaves accessed via Lightweight HPS2FPGA AXI bridge
+ */
+#define ASOC_AXI_LW_BASE        0xFF200000
+#define ASOC_AXI_LW_SIZE        0x00100000
+
+/**
+ * FPGA NIOS controller register
+ */
+#define ASOC_DSP_NIOS_CTRL      0x0500
+
+#define ASOC_DSP_NIOS_CTRL_RST  0x00000001  // NIOS controller register - bit 0 RESET
+
+/**
+ * FPGA DMA and NIOS base addresses
+ */
+#define ASOC_DSP_NIOS_PROG      0x1000  // Area di memoria programma e dati del Nios
+//#define ASOC_DSP_NIOS_DATA      0x1000  // Area di memoria dati del Nios
+
+/**
+ * FPGA read and write DMA addresses
+ * Valori da sommare al Base Address della periferica per raggiungere le aree di memoria seguenti
+ */
+#define ASOC_DSP_DMA_BASE        0x2000
+#define ASOC_DSP_DMA_WR_BASE    (ASOC_DSP_DMA_BASE + 0x0000)  // DMA WR base address
+#define ASOC_DSP_DMA_RD_BASE    (ASOC_DSP_DMA_BASE + 0x1000)  // DMA RD base address
+
+/**
+ * FPGA DMA control register
+ */
+#define ASOC_DSP_DMA_WR_CONTROL    (ASOC_DSP_DMA_WR_BASE + 0x0800)
+#define ASOC_DSP_DMA_RD_CONTROL    (ASOC_DSP_DMA_RD_BASE + 0x0800)
+
+#define ASOC_DSP_DMA_CTRL_GO       0x00000001 //avvia il rispettivo DMA
+#define ASOC_DSP_DMA_CTRL_INT_EN   0x00000002 //abilita interrrupt del termine programma
+#define ASOC_DSP_DMA_CTRL_RST_INT  0x00000004 //reset dell'interrupt, Il bit è resettato anche da un go
+#define ASOC_DSP_DMA_CTRL_RST      0x00000008 //ferma il DMA e mette tutto in IDLE 
+
+/**
+ * FPGA DMA status register
+ */
+#define ASOC_DSP_DMA_RD_STATUS     (ASOC_DSP_DMA_RD_BASE + 0x0804)
+
+#define ASOC_DSP_INT_EN_RD      0x00000001 // Stato del Bit di Enable interrupt DMA RD
+#define ASOC_DSP_RUNNING_RD     0x00000002 // Lettura dati dal DSP in corso
+#define ASOC_DSP_EXE_BURST_RD   0x00000004 // Scrittura in DDR in corso
+#define ASOC_DSP_SP_WRITE_WR    0x00000008 // Scrittura dati sui DSP
+#define ASOC_DSP_INT_EN_WR      0x00000010 // Stato del Bit di Enable Interrupt
+#define ASOC_DSP_RUNNING_WR     0x00000020 // Scrittura dati dal DSP in corso
+#define ASOC_DSP_EXE_BURST_WR   0x00000040 // Scrittura in DDR in corso
+#define ASOC_DSP_SC_INT_WR      0x00000080 // Stato Del Pin di interrupt wr
+#define ASOC_DSP_SC_INT_RD      0x00000100 // Stato Del Pin di interrupt rd
+
+/**
+ * FPGA DMA pc init register
+ */
+#define ASOC_DSP_DMA_WR_PC_INIT    (ASOC_DSP_DMA_WR_BASE + 0x0808)
+#define ASOC_DSP_DMA_RD_PC_INIT    (ASOC_DSP_DMA_RD_BASE + 0x0808)
+
+
+/**
+ *  Opcode
+ *  3333333333222222222211111111110000000000
+ *  9876543210987654321098765432109876543210
+ *                                       ---  0  2 Src Address
+ *                                    ---     3  5 Src Increment
+ *                                 ---        6  8 Dst Address
+ *                              ---           9 11 Dst Increment
+ *          --------------------             12 31 nwords
+ *       ---                                 32 34 iter op
+ *  -----                                    35 39 Loop Address
+ *  
+ *  Src Address   : indice per l'accesso all'array src_addr
+ *  Src Increment : indice per l'accesso all'array src_incr
+ *  Dst Address   : indice per l'accesso all'array dst_addr
+ *  Dst Increment : indice per l'accesso all'array dst_incr
+ *  nwords        : Numero di word da trasferire diviso in busrt, NB l'ultimo burst può essere più corto     
+ *                  se è Es 1, locazione 1 degli iteratori decremento il contatore e avvio la lettura in busrt
+ *                  se Iter è zero  inizializzo il contatore al valore di reset e vado alla istruzione successiva,
+ *                  se diversa da zero vado direttamente all'istruzione puntata da loop address  
+ *                  l'iteratore particolare che è 7 che oltre a resettare il contatore ITER attende
+ *                  il ready della destinazone.
+ *  iter op       : se i tre bit sono zero eseguo un solo ciclo come se iteratore è zero.
+ *  Loop Address  : Da utilizzare come offset segnato           
+ *   
+ */
+typedef struct {
+  uint64_t  src_addr : 3;
+  uint64_t  src_incr : 3;
+  uint64_t  dst_addr : 3;
+  uint64_t  dst_incr : 3;
+  uint64_t  nwords   :20;
+  uint64_t  iter_op  : 3;
+  uint64_t  loop_addr: 5;
+  uint64_t  unused   :24;
+}sAsocDspDmaOpcode;
+
+/**
+ * DMA WRITING TO DSP READING FROM MEMORY 
+ * Src Address  : Parola intera 40Bit - 32dati 8burstLen
+ * Src Increment: parola da 40 divisa in due da 20 signed sull'ultimo busrt uso la secobda word di incremento
+ * Dst Address  : 
+ * Dst Increment:
+ * nwords       : Numero di word da trasferire diviso in busrt, NB l'ultimo burst può essere più corto
+ *                se è Es 1, locazione 1 degli iteratori decremento il contatore e avvio la lettura in busrt
+ *                se Iter è zero  inizializzo il contatore al valore di reset e vado alla istruzione successiva,
+ *                se diversa da zero vado direttamente all'istruzione puntata da loop address  
+ *                l'iteratore particolare che è 7 che oltre a resettare il contatore ITER attende il ready della destinazone.
+ * iter op      : se i tre bit sono zero eseguo un solo ciclo come se iteratore è zero.
+ * Loop Address : Da utilizzare come offset segnato
+ */
+typedef struct {
+  sAsocDspDmaOpcode opcode[128];
+  struct {
+    uint64_t        address   :30;
+    uint64_t        burst_size:10;
+  }                 src_addr[8]; 
+  struct {
+    uint64_t        brst_inc :20;
+    uint64_t        end_inc  :20;
+  }                 src_incr[8]; 
+  struct {
+    uint64_t        address0 :20;
+    uint64_t        address1 :20;
+  }                 dst_addr[8]; 
+  struct {
+    uint64_t        word_inc :13;
+    uint64_t        burst_inc:13;
+    uint64_t        end_inc  :13;
+  }                 dst_incr[8]; 
+  struct{
+    uint64_t        iter    :20;
+    uint64_t        iterrst :20;
+  }                 iter[8];
+}sAsocDspDmaWr;
+#define ASOC_DSP_DMA_WR_DEF_SIZE sizeof(sAsocDspDmaWr)
+
+/**	
+ * DMA READER FROM DSP WRITING TO MEMORY 
+ * Src Address  : Parola intera 40Bit - 32dati 8burstLen
+ * Src Increment: parola da 40 divisa in due da 20 signed sull'ultimo busrt uso la secobda word di incremento
+ * Dst Address  : 
+ * Dst Increment:
+ * nwords       : Numero di word da trasferire diviso in busrt, NB l'ultimo burst può essere più corto			
+ *                se è Es 1, locazione 1 degli iteratori decremento il contatore e avvio la lettura in busrt
+ *                se Iter è zero  inizializzo il contatore al valore di reset e vado alla istruzione successiva,
+ *                se diversa da zero vado direttamente all'istruzione puntata da loop address  
+ *                l'iteratore particolare che è 7 che oltre a resettare il contatore ITER attende il ready della destinazone.
+ * iter op      : se i tre bit sono zero eseguo un solo ciclo come se iteratore è zero.
+ * Loop Address : Da utilizzare come offset segnato
+ */
+typedef struct {
+  sAsocDspDmaOpcode opcode[128];
+  struct {
+    uint64_t        address :32;
+    uint64_t        unused  :8;
+  }                 src_addr[8]; 
+  struct {
+    uint64_t        word_inc :13;
+    uint64_t        burst_inc:13;
+    uint64_t        end_inc  :13;
+  }                 src_incr[8];
+  struct {
+    uint64_t        address   :30;
+    uint64_t        burst_size:10;
+  }                 dst_addr[8];
+  struct {
+    uint64_t        word_inc :20;
+    uint64_t        end_inc  :20;
+  }                 dst_incr[8]; 
+  struct{
+    uint64_t        iter    :20;
+    uint64_t        iterrst :20;
+  }                 iter[8];
+}sAsocDspDmaRd;
+
+#define ASOC_DSP_DMA_RD_DEF_SIZE sizeof(sAsocDspDmaRd)
+
+/**
+ */
+typedef struct {
+  uint8_t        *nios_prog;
+  uint32_t        prog_size;
+  uint8_t        *nios_data;
+  uint32_t        data_size;
+  sAsocDspDmaWr  *dma_wr;
+  uint32_t        dma_wr_size;
+  sAsocDspDmaRd  *dma_rd;
+  uint32_t        dma_rd_size;
+  void (*ptr_set)(uint32_t, uint32_t);
+}sAsocDspFilter;
+
+#endif  /* __ASOC_DSP_H */
